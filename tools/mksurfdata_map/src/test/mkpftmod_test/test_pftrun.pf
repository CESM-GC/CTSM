module test_pftrun
  
  ! Tests of mkpftMod: pft_override functions

  use pfunit_mod

  use shr_kind_mod, only : r8 => shr_kind_r8
  use mkpftMod
  use mkvarctl, only: numpft
  use mkpftConstantsMod, only: maxpft
  use mkpctPftTypeMod    , only : pct_pft_type
  use mkdomainMod        , only : domain_type, for_test_create_domain, domain_clean

  implicit none
  save

  @TestCase
  type, extends(TestCase) :: TestMkPFTRun
    character(len=12) :: mapfname
    character(len=12) :: fpft
    type(domain_type) :: ldomain
    integer :: ndiag
    type(pct_pft_type), allocatable :: pctnatpft(:)     ! % of grid cell that is nat veg, and breakdown into PFTs
    real(r8), allocatable  :: pctlnd_pft(:)             ! PFT data: % of gridcell for PFTs
    type(pct_pft_type), allocatable :: pctcft(:)        ! % of grid cell that is crop, and breakdown into CFTs
   contains
     procedure :: setUp
     procedure :: tearDown
  end type TestMkPFTRun

contains

  subroutine setUp(this)
    class(TestMkPFTRun), intent(inout) :: this
    integer :: ns_o

    numpft = 16
    pft_idx(0:maxpft) = -1
    pft_frc(0:maxpft) = 0.0_r8
    this%ndiag = 6
    this%mapfname = "none"
    this%fpft     = "none"
    call for_test_create_domain( this%ldomain )
    ns_o = this%ldomain%ns
    allocate(  this%pctnatpft(ns_o) )
    allocate(  this%pctlnd_pft(ns_o) )
    allocate(  this%pctcft(ns_o) )
  end subroutine setUp

  subroutine tearDown(this)
    class(TestMkPFTRun), intent(inout) :: this

    deallocate(  this%pctnatpft )
    deallocate(  this%pctlnd_pft )
    deallocate(  this%pctcft )
    call domain_clean( this%ldomain )

  end subroutine tearDown

  @Test
  subroutine test_runmkpftZero(this)
    class(TestMkPFTRun), intent(inout) :: this
    logical :: zero_out, all_veg

    zero_out = .true.
    call mkpftInit( zero_out, all_veg )
    @assertFalse(  use_input_pft )
    @assertFalse( all_veg )
    call mkpft(this%ldomain, this%mapfname, this%fpft, this%ndiag, allow_no_crops=.false., &
     pctlnd_o=this%pctlnd_pft, pctnatpft_o=this%pctnatpft, pctcft_o=this%pctcft)

  end subroutine test_runmkpftZero

  @Test
  subroutine test_runmkpftPftORide(this)
    class(TestMkPFTRun), intent(inout) :: this
    logical :: zero_out, all_veg

    zero_out = .false.
    pft_idx(0) = 1
    pft_frc(0) = 100._r8
    call mkpftInit( zero_out, all_veg )
    @assertTrue(  use_input_pft )
    @assertTrue( all_veg )
    call mkpft(this%ldomain, this%mapfname, this%fpft, this%ndiag, allow_no_crops=.false., &
     pctlnd_o=this%pctlnd_pft, pctnatpft_o=this%pctnatpft, pctcft_o=this%pctcft)

  end subroutine test_runmkpftPftORide

end module test_pftrun
