module test_pft_oride
  
  ! Tests of mkpftMod: pft_override functions

  use pfunit_mod

  use shr_kind_mod, only : r8 => shr_kind_r8
  use mkpftMod
  use mkvarctl, only : numpft
  use mkvarpar, only : numstdpft
  use mkpftConstantsMod, only : c3cropindex

  implicit none
  save

  @TestCase
  type, extends(TestCase) :: TestPFTORide
     type(pft_oride) :: pftoverride
   contains
     procedure :: setUp
     procedure :: tearDown
  end type TestPFTORide

  logical :: zero_out, all_veg

contains

  subroutine setUp(this)
    class(TestPFTORide), intent(inout) :: this

    pft_idx(:) = -1
    pft_frc(:) = 0.0_r8
    zero_out = .false.
    numpft = numstdpft
    call mkpftInit( zero_out, all_veg )
    this%pftoverride = pft_oride( )
  end subroutine setUp

  subroutine tearDown(this)
    class(TestPFTORide), intent(inout) :: this

    call this%pftoverride%Clean()

  end subroutine tearDown

  @Test
  subroutine test_runmkpftZero(this)
    class(TestPFTORide), intent(inout) :: this

    call mkpftInit( zero_out, all_veg )
    call this%pftoverride%InitZeroOut()
    @assertEqual(   0.0_r8, this%pftoverride%crop   )
    @assertEqual(   0.0_r8, this%pftoverride%natveg )
    @assertEqual( 100.0_r8, sum(this%pftoverride%cft))
    @assertEqual( 100.0_r8, sum(this%pftoverride%natpft))

  end subroutine test_runmkpftZero

  @Test
  subroutine test_runSetpft(this)
    class(TestPFTORide), intent(inout) :: this
    integer, parameter :: pftidx = 1

    pft_idx(0) = pftidx
    pft_frc(0) = 100.0_r8
    call mkpftInit( zero_out, all_veg )
    call this%pftoverride%InitAllPFTIndex()
    @assertEqual( 0.0_r8,   this%pftoverride%crop )
    @assertEqual( 100.0_r8, this%pftoverride%natveg )
    @assertEqual( 100.0_r8, sum(this%pftoverride%cft) )
    @assertEqual( 100.0_r8, sum(this%pftoverride%natpft) )
    @assertEqual( 100.0_r8, this%pftoverride%natpft(pftidx) )

  end subroutine test_runSetpft

  @Test
  subroutine test_runSetCrop(this)
    class(TestPFTORide), intent(inout) :: this
    integer :: cftidx

    cftidx = c3cropindex
    pft_idx(0) = cftidx
    pft_frc(0) = 100.0_r8
    call mkpftInit( zero_out, all_veg )
    call this%pftoverride%InitAllPFTIndex()
    @assertEqual( 100.0_r8,   this%pftoverride%crop )
    @assertEqual(   0.0_r8, this%pftoverride%natveg )
    @assertEqual( 100.0_r8, sum(this%pftoverride%cft) )
    @assertEqual( 100.0_r8, sum(this%pftoverride%natpft) )
    @assertEqual( 100.0_r8, this%pftoverride%cft(numpft-cftidx) )

  end subroutine test_runSetCrop

end module test_pft_oride
