module test_pft_override
  
  ! Tests of mkpftMod: pft_override functions

  use pfunit_mod

  use shr_kind_mod, only : r8 => shr_kind_r8
  use mkpftMod
  use mkvarctl, only: numpft

  implicit none
  save

contains

  @Test
  subroutine test_runmkpftInit
    logical :: zero_out, all_veg

    zero_out = .false.
    call mkpftInit( zero_out, all_veg )
    @assertFalse(  use_input_pft )
    @assertFalse( all_veg )

  end subroutine test_runmkpftInit

  @Test
  subroutine test_runmkpftInitZero
    use mkpftMod, only : use_input_pft
    logical :: zero_out, all_veg

    zero_out = .true.
    call mkpftInit( zero_out, all_veg )
    @assertFalse(  use_input_pft )
    @assertFalse( all_veg )

  end subroutine test_runmkpftInitZero

  @Test
  subroutine test_runmkpftInitPftORide
    use mkpftMod, only : use_input_pft
    logical :: zero_out, all_veg

    zero_out = .false.
    pft_idx(0) = 1
    pft_frc(0) = 100._r8
    call mkpftInit( zero_out, all_veg )
    @assertTrue(  use_input_pft )
    @assertTrue( all_veg )

  end subroutine test_runmkpftInitPftORide


  @Test
  subroutine test_runmkpftInitPftORideCrop
    use mkpftMod, only : use_input_pft
    logical :: zero_out, all_veg

    zero_out = .false.
    numpft = 78
    pft_idx(0) = 17
    pft_frc(0) = 100._r8
    call mkpftInit( zero_out, all_veg )
    @assertTrue(  use_input_pft )
    @assertTrue( all_veg )

  end subroutine test_runmkpftInitPftORideCrop

  @Test
  subroutine test_runmkpftInitBadZeroNInput
    use mkpftMod, only : use_input_pft
    logical :: zero_out, all_veg
    character(len=:), allocatable :: expected_msg

    zero_out = .true.
    numpft = 78
    pft_idx(0) = 17
    pft_frc(0) = 100._r8
    call mkpftInit( zero_out, all_veg )
    @assertExceptionRaised( "ABORTED:" )

  end subroutine test_runmkpftInitBadZeroNInput

  @Test
  subroutine test_runmkpftInitBadNotSum
    use mkpftMod, only : use_input_pft
    logical :: zero_out, all_veg
    character(len=:), allocatable :: expected_msg

    zero_out = .false.
    numpft = 78
    pft_idx(0) = 17
    pft_frc(0) = 99._r8
    call mkpftInit( zero_out, all_veg )
    @assertExceptionRaised( "ABORTED:" )

  end subroutine test_runmkpftInitBadNotSum

  @Test
  subroutine test_runmkpftInitBadPFTOutRange
    use mkpftMod, only : use_input_pft
    logical :: zero_out, all_veg
    character(len=:), allocatable :: expected_msg

    zero_out = .false.
    numpft = 16
    pft_idx(0) = 17
    pft_frc(0) = 100._r8
    call mkpftInit( zero_out, all_veg )
    @assertExceptionRaised( "ABORTED:" )

  end subroutine test_runmkpftInitBadPFTOutRange


end module test_pft_override
